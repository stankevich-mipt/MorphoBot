services:
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./mlflow/minio_data:/data
    ports:
      - "9002:9000"   # MinIO API
      - "9001:9001"   # MinIO Console
    command: server /data --console-address ":9001"
    networks:
      - mlflow-network

  mlflow-server:
    build: 
      context: ./mlflow_backend
      dockerfile: Dockerfile
    container_name: mlflow-server
    restart: unless-stopped
    depends_on:
      - minio
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9002
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MLFLOW_SERVER_DEFAULT_ARTIFACT_ROOT: ${MLFLOW_SERVER_DEFAULT_ARTIFACT_ROOT}
      AWS_DEFAULT_REGION: us-east-1
    # Optional but helpful
      AWS_EC2_METADATA_DISABLED: "true"
    volumes:
      - ./mlflow/mlflow_backend:/mlflow_backend
    ports:
      - "5000:5000"
    command: >
      mlflow server 
      --backend-store-uri sqlite:////mlflow_backend/mlflow.db 
      --default-artifact-root s3://${MLFLOW_SERVER_DEFAULT_ARTIFACT_ROOT}
      --serve-artifacts
      --host 0.0.0.0
    networks:
      - mlflow-network

  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set local http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      mc mb --ignore-existing local/${MLFLOW_SERVER_DEFAULT_ARTIFACT_ROOT};
      exit 0;
      "
    networks:
      - mlflow-network

networks:
  mlflow-network:
    driver: bridge
